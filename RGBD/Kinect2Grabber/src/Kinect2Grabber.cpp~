#include <Kinect2Grabber/Kinect2Grabber.h>


namespace kinect
{

Kinect2Grabber::Kinect2Grabber()
{
	
	if(freenect2_.enumerateDevices()==0)
	{
		std::cout<<"No devices connected"<<std::endl;
		exit(EXIT_FAILURE);
	}
	deviceSerial_ = freenect2_.getDefaultDeviceSeriaNumber();

	setupPacketPipeline();

	//difference between pipeline methods...vs without pipeline?
	if(pipeline_)
		dev_ = freenect2_.openDevice(deviceSerial_,pipeline_);
	else
		dev_ = freenect2_.openDevice(deviceSerial_);

	listener = new libfreenect2::SyncMultiFrameListener(libfreenect2::Frame::Color | libfreenect2::Frame::Ir | libfreenect2::Frame::Depth);

	dev_->setColorFrameListener(listener);
	dev_->setIrAndDepthFrameListener(listener);

	dev_->start();

}

bool Kinect2Grabber::setupPacketPipeline()
{
	#ifdef FREENECT2_CPU_PIPELINE
		if(!pipeline_)
			pipeline_ = std::make_shared(new libfreenect2::CpuPacketPipeline());
	#endif

	#ifdef FREENECT2_GL_SUPPORT_PIPELINE
		if(!pipeline_)
			pipeline_ = std::make_shared(new libfreenect2::OpenGLPacketPipeline());
		else
			std::cout<<"OpenGL packet pipeline not supported....check drivers";
	#endif

	#ifdef FREENECT@_CL_SUPPORT_PIPELINE
		if(!pipeline_)
			pipeline_ = std::make_shared(new libfreenect2::OpenCLPacketPipeline());
		else
			std::cout<<"OpenCL packet pipeline not supported....check drivers";
	#endif

	return true;
}

const FrameData& Kinect2Grabber::getFrameData()
{
	listener->waitForNewFrame(frames_);

	libfreenect2::Frame *rgb = frames_[libfreenect2::Frame::Color];
    libfreenect2::Frame *ir = frames_[libfreenect2::Frame::Ir];
    libfreenect2::Frame *depth = frames_[libfreenect2::Frame::Depth];

    data_.color_ = cv::Mat(rgb->width,rgb->height,CV_8UC3,rgb->data);
    data_.IR_ = cv::Mat(ir->width,ir->height,CV_32FC1,ir->data);
    data_.depth_ = cv::Mat(depth->width,depth->height,CV_32FC1,depth->data);

    return data_;
}

}